package neuralnetwork;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Ziheng Cong
 */

public class Neuron {
    //Inputs of this neuron
    private ArrayList<Double> input;
    //Output of this neuron, generated by the activation function
    private Double output;
    //Number of Inputs. Equals to 0 means the neuron wasn's intialized yet.
    private int numberOfInputs = 0;
    //Weights associated with this Neuron
    protected ArrayList<Double> weight;
    //Random singleton object that actually generates the random numbers
    public static Random r;
    //Store the coefficient of the linear activation function
    private double a = 1.0;
    //Value that is passed to the activation function.
    private Double outputBeforeActivation; 
    //Bias of the neuron. It should be always 1.0, except for the first layer.
    protected Double bias = 1.0; 

    /**
     * Neuron dummy constructor
     */
    public Neuron() {
        
    }
    /**
     * Neuron constructor
     * @param numberofinputs Number of Inputs
     */
    public Neuron(int numberofinputs) {
        numberOfInputs = numberofinputs;
        weight=new ArrayList<>(numberofinputs+1);
        input=new ArrayList<>(numberofinputs);
    }
    /**
     * init
     * This method initializes the neron by setting randomly its weights
     */
    public void init(){
       //This gives the time 1 January 1970 till now in seconds
       long secondsFromEpoch = Instant.ofEpochSecond(0L).until(Instant.now(), ChronoUnit.SECONDS);
        if(numberOfInputs>0){
            for(int i=0;i<=numberOfInputs;i++){
                if(r==null)
                    r = new Random(secondsFromEpoch);
                double newWeight = r.nextDouble();
                //Add random weights to array weight
                this.weight.add(newWeight);
            }
        }
    }
    /**
     * setActivationFnc
     * Set the type of activation function and its coefficient
     * @param fncType The type of the function
     * @param coefficient The coefficient of the linear activation function
     * @return Return a which stores the coefficient
     */
    public double setActivationFnc(String fncType, double coefficient) throws NeuralException{
        if (fncType == "Linear"){ 
            this.a = coefficient;
        }else{
            throw new NeuralException("Other function type not support yet");
        }
        return a;
    }
    /**
     * activationFunction
     * The method for calculating the linear activation function's value
     * @param outputBeforeActivation The input value to the activation function
     * @return Returns the output of the activation Function
     */
    public double activationFunction(double outputBeforeActivation){
        return a*outputBeforeActivation;
    }
    /**
     * calc
     * Calculates the neuron's output
     */
    public void calc(){
        outputBeforeActivation = 0.0;
        if (numberOfInputs>0) {
            if (input != null && weight != null) {
                for(int i=0;i<numberOfInputs;i++){
                    outputBeforeActivation += weight.get(i) * input.get(i);
                }
                outputBeforeActivation += bias * weight.get(numberOfInputs);
            }
        }
        output=activationFunction(outputBeforeActivation);
    }
    /**
     * setInputs
     * Sets an array of values to the neuron's input
     * @param inputs The array gets from training data
     */
    public void setInputs(double[] inputs){
        //Save inputs array from main class to here into input arraylist
        if(inputs.length==numberOfInputs){
            for(int i=0;i<numberOfInputs;i++){
                try{
                    this.input.set(i, inputs[i]);
                }
                catch(IndexOutOfBoundsException iobe){
                    input.add(inputs[i]);
                }
            }
        }
    }
    /**
     * getOutput
     * @return Returns the neuron's output
     */
    public double getOutput(){
        return output;
    }
    /**
     * getWeights
     * @return Returns the neuron's weights in the form of vector
     */
    public double[] getWeights(){
        double[] weights = new double[numberOfInputs+1];
        for(int i=0;i<=numberOfInputs;i++){
            weights[i]=weight.get(i);
        }
        return weights;
    }
    /**
     * setWeight
     * sets the weight at the ith java position
     * @param i ith java position
     * @param value The value to be set on the weight
     * @throws NeuralException 
     */
    public void setWeight(int i,double value) throws NeuralException{
        if(i>=0 && i<=numberOfInputs){
            this.weight.set(i, value);
        }
        else{
            throw new NeuralException("Invalid weight index");
        }
    }
    /**
     * Print appropriate output for each record
     * @return 
     */
    @Override
    public String toString() {
        StringBuilder str = new StringBuilder();
        //Neuron Inputs
        str.append ("Neuron Inputs\n");
        for (Double in: input){
            str.append(in.toString());
            str.append(" ");
        }
        //Neuron Weights
        str.append("\n");
        str.append ("Neuron Weights\n");
        for (Double wt: weight){
            str.append(String.format("%.3f ",wt));
        } 
        //Output before activation function
        str.append("\n");
        str.append ("S  Output before activation: ") ;
        str.append(String.format("%.3f", this.outputBeforeActivation)); 
        str.append("\n");
        str.append ("Activation Function: ");
        //Output after activation function
        str.append("\n");
        str.append (" g(s) Neuron Output: ");
        str.append(String.format("%.3f", this.output));
        str.append("\n ");
       
        return str.toString();
    } 
}
